// Code generated by mockery v2.53.4. DO NOT EDIT.

package scanner

import (
	matcher "github.com/alican-uelger/deep-scan/internal/matcher"
	mock "github.com/stretchr/testify/mock"
)

// TextMatcherMock is an autogenerated mock type for the TextMatcher type
type TextMatcherMock struct {
	mock.Mock
}

type TextMatcherMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TextMatcherMock) EXPECT() *TextMatcherMock_Expecter {
	return &TextMatcherMock_Expecter{mock: &_m.Mock}
}

// Match provides a mock function with given fields: text, search, searchType, context
func (_m *TextMatcherMock) Match(text string, search string, searchType matcher.SearchType, context int) (bool, bool, []matcher.MatchResult) {
	ret := _m.Called(text, search, searchType, context)

	if len(ret) == 0 {
		panic("no return value specified for Match")
	}

	var r0 bool
	var r1 bool
	var r2 []matcher.MatchResult
	if rf, ok := ret.Get(0).(func(string, string, matcher.SearchType, int) (bool, bool, []matcher.MatchResult)); ok {
		return rf(text, search, searchType, context)
	}
	if rf, ok := ret.Get(0).(func(string, string, matcher.SearchType, int) bool); ok {
		r0 = rf(text, search, searchType, context)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string, matcher.SearchType, int) bool); ok {
		r1 = rf(text, search, searchType, context)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(string, string, matcher.SearchType, int) []matcher.MatchResult); ok {
		r2 = rf(text, search, searchType, context)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]matcher.MatchResult)
		}
	}

	return r0, r1, r2
}

// TextMatcherMock_Match_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Match'
type TextMatcherMock_Match_Call struct {
	*mock.Call
}

// Match is a helper method to define mock.On call
//   - text string
//   - search string
//   - searchType matcher.SearchType
//   - context int
func (_e *TextMatcherMock_Expecter) Match(text interface{}, search interface{}, searchType interface{}, context interface{}) *TextMatcherMock_Match_Call {
	return &TextMatcherMock_Match_Call{Call: _e.mock.On("Match", text, search, searchType, context)}
}

func (_c *TextMatcherMock_Match_Call) Run(run func(text string, search string, searchType matcher.SearchType, context int)) *TextMatcherMock_Match_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(matcher.SearchType), args[3].(int))
	})
	return _c
}

func (_c *TextMatcherMock_Match_Call) Return(_a0 bool, _a1 bool, _a2 []matcher.MatchResult) *TextMatcherMock_Match_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TextMatcherMock_Match_Call) RunAndReturn(run func(string, string, matcher.SearchType, int) (bool, bool, []matcher.MatchResult)) *TextMatcherMock_Match_Call {
	_c.Call.Return(run)
	return _c
}

// NewTextMatcherMock creates a new instance of TextMatcherMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTextMatcherMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TextMatcherMock {
	mock := &TextMatcherMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
