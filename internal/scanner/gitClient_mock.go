// Code generated by mockery v2.51.0. DO NOT EDIT.

package scanner

import (
	git "github.com/alican-uelger/deep-scan/internal/git"
	mock "github.com/stretchr/testify/mock"
)

// GitClientMock is an autogenerated mock type for the GitClient type
type GitClientMock struct {
	mock.Mock
}

type GitClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *GitClientMock) EXPECT() *GitClientMock_Expecter {
	return &GitClientMock_Expecter{mock: &_m.Mock}
}

// GetRawFile provides a mock function with given fields: project, path
func (_m *GitClientMock) GetRawFile(project git.Project, path string) ([]byte, error) {
	ret := _m.Called(project, path)

	if len(ret) == 0 {
		panic("no return value specified for GetRawFile")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(git.Project, string) ([]byte, error)); ok {
		return rf(project, path)
	}
	if rf, ok := ret.Get(0).(func(git.Project, string) []byte); ok {
		r0 = rf(project, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(git.Project, string) error); ok {
		r1 = rf(project, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GitClientMock_GetRawFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRawFile'
type GitClientMock_GetRawFile_Call struct {
	*mock.Call
}

// GetRawFile is a helper method to define mock.On call
//   - project git.Project
//   - path string
func (_e *GitClientMock_Expecter) GetRawFile(project interface{}, path interface{}) *GitClientMock_GetRawFile_Call {
	return &GitClientMock_GetRawFile_Call{Call: _e.mock.On("GetRawFile", project, path)}
}

func (_c *GitClientMock_GetRawFile_Call) Run(run func(project git.Project, path string)) *GitClientMock_GetRawFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(git.Project), args[1].(string))
	})
	return _c
}

func (_c *GitClientMock_GetRawFile_Call) Return(_a0 []byte, _a1 error) *GitClientMock_GetRawFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GitClientMock_GetRawFile_Call) RunAndReturn(run func(git.Project, string) ([]byte, error)) *GitClientMock_GetRawFile_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupProjects provides a mock function with given fields: group
func (_m *GitClientMock) ListGroupProjects(group string) ([]git.Project, error) {
	ret := _m.Called(group)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupProjects")
	}

	var r0 []git.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]git.Project, error)); ok {
		return rf(group)
	}
	if rf, ok := ret.Get(0).(func(string) []git.Project); ok {
		r0 = rf(group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]git.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GitClientMock_ListGroupProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupProjects'
type GitClientMock_ListGroupProjects_Call struct {
	*mock.Call
}

// ListGroupProjects is a helper method to define mock.On call
//   - group string
func (_e *GitClientMock_Expecter) ListGroupProjects(group interface{}) *GitClientMock_ListGroupProjects_Call {
	return &GitClientMock_ListGroupProjects_Call{Call: _e.mock.On("ListGroupProjects", group)}
}

func (_c *GitClientMock_ListGroupProjects_Call) Run(run func(group string)) *GitClientMock_ListGroupProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *GitClientMock_ListGroupProjects_Call) Return(_a0 []git.Project, _a1 error) *GitClientMock_ListGroupProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GitClientMock_ListGroupProjects_Call) RunAndReturn(run func(string) ([]git.Project, error)) *GitClientMock_ListGroupProjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListRepositoryTree provides a mock function with given fields: project
func (_m *GitClientMock) ListRepositoryTree(project git.Project) ([]git.TreeNode, error) {
	ret := _m.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for ListRepositoryTree")
	}

	var r0 []git.TreeNode
	var r1 error
	if rf, ok := ret.Get(0).(func(git.Project) ([]git.TreeNode, error)); ok {
		return rf(project)
	}
	if rf, ok := ret.Get(0).(func(git.Project) []git.TreeNode); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]git.TreeNode)
		}
	}

	if rf, ok := ret.Get(1).(func(git.Project) error); ok {
		r1 = rf(project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GitClientMock_ListRepositoryTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRepositoryTree'
type GitClientMock_ListRepositoryTree_Call struct {
	*mock.Call
}

// ListRepositoryTree is a helper method to define mock.On call
//   - project git.Project
func (_e *GitClientMock_Expecter) ListRepositoryTree(project interface{}) *GitClientMock_ListRepositoryTree_Call {
	return &GitClientMock_ListRepositoryTree_Call{Call: _e.mock.On("ListRepositoryTree", project)}
}

func (_c *GitClientMock_ListRepositoryTree_Call) Run(run func(project git.Project)) *GitClientMock_ListRepositoryTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(git.Project))
	})
	return _c
}

func (_c *GitClientMock_ListRepositoryTree_Call) Return(_a0 []git.TreeNode, _a1 error) *GitClientMock_ListRepositoryTree_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GitClientMock_ListRepositoryTree_Call) RunAndReturn(run func(git.Project) ([]git.TreeNode, error)) *GitClientMock_ListRepositoryTree_Call {
	_c.Call.Return(run)
	return _c
}

// NewGitClientMock creates a new instance of GitClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitClientMock {
	mock := &GitClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
