// Code generated by mockery v2.51.1. DO NOT EDIT.

package scanner

import mock "github.com/stretchr/testify/mock"

// StorageMock is an autogenerated mock type for the Storage type
type StorageMock struct {
	mock.Mock
}

type StorageMock_Expecter struct {
	mock *mock.Mock
}

func (_m *StorageMock) EXPECT() *StorageMock_Expecter {
	return &StorageMock_Expecter{mock: &_m.Mock}
}

// IsDir provides a mock function with given fields: _a0
func (_m *StorageMock) IsDir(_a0 string) (bool, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IsDir")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageMock_IsDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDir'
type StorageMock_IsDir_Call struct {
	*mock.Call
}

// IsDir is a helper method to define mock.On call
//   - _a0 string
func (_e *StorageMock_Expecter) IsDir(_a0 interface{}) *StorageMock_IsDir_Call {
	return &StorageMock_IsDir_Call{Call: _e.mock.On("IsDir", _a0)}
}

func (_c *StorageMock_IsDir_Call) Run(run func(_a0 string)) *StorageMock_IsDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *StorageMock_IsDir_Call) Return(_a0 bool, _a1 error) *StorageMock_IsDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageMock_IsDir_Call) RunAndReturn(run func(string) (bool, error)) *StorageMock_IsDir_Call {
	_c.Call.Return(run)
	return _c
}

// MkdirAll provides a mock function with given fields: _a0
func (_m *StorageMock) MkdirAll(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for MkdirAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageMock_MkdirAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MkdirAll'
type StorageMock_MkdirAll_Call struct {
	*mock.Call
}

// MkdirAll is a helper method to define mock.On call
//   - _a0 string
func (_e *StorageMock_Expecter) MkdirAll(_a0 interface{}) *StorageMock_MkdirAll_Call {
	return &StorageMock_MkdirAll_Call{Call: _e.mock.On("MkdirAll", _a0)}
}

func (_c *StorageMock_MkdirAll_Call) Run(run func(_a0 string)) *StorageMock_MkdirAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *StorageMock_MkdirAll_Call) Return(_a0 error) *StorageMock_MkdirAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageMock_MkdirAll_Call) RunAndReturn(run func(string) error) *StorageMock_MkdirAll_Call {
	_c.Call.Return(run)
	return _c
}

// ReadDir provides a mock function with given fields: _a0
func (_m *StorageMock) ReadDir(_a0 string) ([]string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ReadDir")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageMock_ReadDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDir'
type StorageMock_ReadDir_Call struct {
	*mock.Call
}

// ReadDir is a helper method to define mock.On call
//   - _a0 string
func (_e *StorageMock_Expecter) ReadDir(_a0 interface{}) *StorageMock_ReadDir_Call {
	return &StorageMock_ReadDir_Call{Call: _e.mock.On("ReadDir", _a0)}
}

func (_c *StorageMock_ReadDir_Call) Run(run func(_a0 string)) *StorageMock_ReadDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *StorageMock_ReadDir_Call) Return(_a0 []string, _a1 error) *StorageMock_ReadDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageMock_ReadDir_Call) RunAndReturn(run func(string) ([]string, error)) *StorageMock_ReadDir_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFile provides a mock function with given fields: _a0
func (_m *StorageMock) ReadFile(_a0 string) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ReadFile")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageMock_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type StorageMock_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - _a0 string
func (_e *StorageMock_Expecter) ReadFile(_a0 interface{}) *StorageMock_ReadFile_Call {
	return &StorageMock_ReadFile_Call{Call: _e.mock.On("ReadFile", _a0)}
}

func (_c *StorageMock_ReadFile_Call) Run(run func(_a0 string)) *StorageMock_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *StorageMock_ReadFile_Call) Return(_a0 []byte, _a1 error) *StorageMock_ReadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageMock_ReadFile_Call) RunAndReturn(run func(string) ([]byte, error)) *StorageMock_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFile provides a mock function with given fields: _a0, _a1
func (_m *StorageMock) WriteFile(_a0 string, _a1 []byte) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WriteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageMock_WriteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFile'
type StorageMock_WriteFile_Call struct {
	*mock.Call
}

// WriteFile is a helper method to define mock.On call
//   - _a0 string
//   - _a1 []byte
func (_e *StorageMock_Expecter) WriteFile(_a0 interface{}, _a1 interface{}) *StorageMock_WriteFile_Call {
	return &StorageMock_WriteFile_Call{Call: _e.mock.On("WriteFile", _a0, _a1)}
}

func (_c *StorageMock_WriteFile_Call) Run(run func(_a0 string, _a1 []byte)) *StorageMock_WriteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *StorageMock_WriteFile_Call) Return(_a0 error) *StorageMock_WriteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageMock_WriteFile_Call) RunAndReturn(run func(string, []byte) error) *StorageMock_WriteFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorageMock creates a new instance of StorageMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageMock {
	mock := &StorageMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
