// Code generated by mockery v2.53.4. DO NOT EDIT.

package sops

import mock "github.com/stretchr/testify/mock"

// StorageMock is an autogenerated mock type for the Storage type
type StorageMock struct {
	mock.Mock
}

type StorageMock_Expecter struct {
	mock *mock.Mock
}

func (_m *StorageMock) EXPECT() *StorageMock_Expecter {
	return &StorageMock_Expecter{mock: &_m.Mock}
}

// ReadFile provides a mock function with given fields: _a0
func (_m *StorageMock) ReadFile(_a0 string) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ReadFile")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageMock_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type StorageMock_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - _a0 string
func (_e *StorageMock_Expecter) ReadFile(_a0 interface{}) *StorageMock_ReadFile_Call {
	return &StorageMock_ReadFile_Call{Call: _e.mock.On("ReadFile", _a0)}
}

func (_c *StorageMock_ReadFile_Call) Run(run func(_a0 string)) *StorageMock_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *StorageMock_ReadFile_Call) Return(_a0 []byte, _a1 error) *StorageMock_ReadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageMock_ReadFile_Call) RunAndReturn(run func(string) ([]byte, error)) *StorageMock_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorageMock creates a new instance of StorageMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageMock {
	mock := &StorageMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
