// Code generated by mockery v2.53.4. DO NOT EDIT.

package git

import (
	github "github.com/google/go-github/v50/github"
	mock "github.com/stretchr/testify/mock"
)

// GitHubAPIMock is an autogenerated mock type for the GitHubAPI type
type GitHubAPIMock struct {
	mock.Mock
}

type GitHubAPIMock_Expecter struct {
	mock *mock.Mock
}

func (_m *GitHubAPIMock) EXPECT() *GitHubAPIMock_Expecter {
	return &GitHubAPIMock_Expecter{mock: &_m.Mock}
}

// GetRawFile provides a mock function with given fields: owner, repo, path, opts
func (_m *GitHubAPIMock) GetRawFile(owner string, repo string, path string, opts *github.RepositoryContentGetOptions) ([]byte, *github.Response, error) {
	ret := _m.Called(owner, repo, path, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetRawFile")
	}

	var r0 []byte
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, string, *github.RepositoryContentGetOptions) ([]byte, *github.Response, error)); ok {
		return rf(owner, repo, path, opts)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, *github.RepositoryContentGetOptions) []byte); ok {
		r0 = rf(owner, repo, path, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, *github.RepositoryContentGetOptions) *github.Response); ok {
		r1 = rf(owner, repo, path, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(string, string, string, *github.RepositoryContentGetOptions) error); ok {
		r2 = rf(owner, repo, path, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GitHubAPIMock_GetRawFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRawFile'
type GitHubAPIMock_GetRawFile_Call struct {
	*mock.Call
}

// GetRawFile is a helper method to define mock.On call
//   - owner string
//   - repo string
//   - path string
//   - opts *github.RepositoryContentGetOptions
func (_e *GitHubAPIMock_Expecter) GetRawFile(owner interface{}, repo interface{}, path interface{}, opts interface{}) *GitHubAPIMock_GetRawFile_Call {
	return &GitHubAPIMock_GetRawFile_Call{Call: _e.mock.On("GetRawFile", owner, repo, path, opts)}
}

func (_c *GitHubAPIMock_GetRawFile_Call) Run(run func(owner string, repo string, path string, opts *github.RepositoryContentGetOptions)) *GitHubAPIMock_GetRawFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(*github.RepositoryContentGetOptions))
	})
	return _c
}

func (_c *GitHubAPIMock_GetRawFile_Call) Return(_a0 []byte, _a1 *github.Response, _a2 error) *GitHubAPIMock_GetRawFile_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GitHubAPIMock_GetRawFile_Call) RunAndReturn(run func(string, string, string, *github.RepositoryContentGetOptions) ([]byte, *github.Response, error)) *GitHubAPIMock_GetRawFile_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupProjects provides a mock function with given fields: org, opts
func (_m *GitHubAPIMock) ListGroupProjects(org string, opts *github.RepositoryListByOrgOptions) ([]*github.Repository, *github.Response, error) {
	ret := _m.Called(org, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupProjects")
	}

	var r0 []*github.Repository
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(string, *github.RepositoryListByOrgOptions) ([]*github.Repository, *github.Response, error)); ok {
		return rf(org, opts)
	}
	if rf, ok := ret.Get(0).(func(string, *github.RepositoryListByOrgOptions) []*github.Repository); ok {
		r0 = rf(org, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *github.RepositoryListByOrgOptions) *github.Response); ok {
		r1 = rf(org, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(string, *github.RepositoryListByOrgOptions) error); ok {
		r2 = rf(org, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GitHubAPIMock_ListGroupProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupProjects'
type GitHubAPIMock_ListGroupProjects_Call struct {
	*mock.Call
}

// ListGroupProjects is a helper method to define mock.On call
//   - org string
//   - opts *github.RepositoryListByOrgOptions
func (_e *GitHubAPIMock_Expecter) ListGroupProjects(org interface{}, opts interface{}) *GitHubAPIMock_ListGroupProjects_Call {
	return &GitHubAPIMock_ListGroupProjects_Call{Call: _e.mock.On("ListGroupProjects", org, opts)}
}

func (_c *GitHubAPIMock_ListGroupProjects_Call) Run(run func(org string, opts *github.RepositoryListByOrgOptions)) *GitHubAPIMock_ListGroupProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*github.RepositoryListByOrgOptions))
	})
	return _c
}

func (_c *GitHubAPIMock_ListGroupProjects_Call) Return(_a0 []*github.Repository, _a1 *github.Response, _a2 error) *GitHubAPIMock_ListGroupProjects_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GitHubAPIMock_ListGroupProjects_Call) RunAndReturn(run func(string, *github.RepositoryListByOrgOptions) ([]*github.Repository, *github.Response, error)) *GitHubAPIMock_ListGroupProjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListRepositoryTree provides a mock function with given fields: owner, repo
func (_m *GitHubAPIMock) ListRepositoryTree(owner string, repo string) ([]*github.TreeEntry, *github.Response, error) {
	ret := _m.Called(owner, repo)

	if len(ret) == 0 {
		panic("no return value specified for ListRepositoryTree")
	}

	var r0 []*github.TreeEntry
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) ([]*github.TreeEntry, *github.Response, error)); ok {
		return rf(owner, repo)
	}
	if rf, ok := ret.Get(0).(func(string, string) []*github.TreeEntry); ok {
		r0 = rf(owner, repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.TreeEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) *github.Response); ok {
		r1 = rf(owner, repo)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(owner, repo)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GitHubAPIMock_ListRepositoryTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRepositoryTree'
type GitHubAPIMock_ListRepositoryTree_Call struct {
	*mock.Call
}

// ListRepositoryTree is a helper method to define mock.On call
//   - owner string
//   - repo string
func (_e *GitHubAPIMock_Expecter) ListRepositoryTree(owner interface{}, repo interface{}) *GitHubAPIMock_ListRepositoryTree_Call {
	return &GitHubAPIMock_ListRepositoryTree_Call{Call: _e.mock.On("ListRepositoryTree", owner, repo)}
}

func (_c *GitHubAPIMock_ListRepositoryTree_Call) Run(run func(owner string, repo string)) *GitHubAPIMock_ListRepositoryTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *GitHubAPIMock_ListRepositoryTree_Call) Return(_a0 []*github.TreeEntry, _a1 *github.Response, _a2 error) *GitHubAPIMock_ListRepositoryTree_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GitHubAPIMock_ListRepositoryTree_Call) RunAndReturn(run func(string, string) ([]*github.TreeEntry, *github.Response, error)) *GitHubAPIMock_ListRepositoryTree_Call {
	_c.Call.Return(run)
	return _c
}

// SearchProjects provides a mock function with given fields: name, opts
func (_m *GitHubAPIMock) SearchProjects(name string, opts *github.SearchOptions) (*github.RepositoriesSearchResult, *github.Response, error) {
	ret := _m.Called(name, opts)

	if len(ret) == 0 {
		panic("no return value specified for SearchProjects")
	}

	var r0 *github.RepositoriesSearchResult
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(string, *github.SearchOptions) (*github.RepositoriesSearchResult, *github.Response, error)); ok {
		return rf(name, opts)
	}
	if rf, ok := ret.Get(0).(func(string, *github.SearchOptions) *github.RepositoriesSearchResult); ok {
		r0 = rf(name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoriesSearchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *github.SearchOptions) *github.Response); ok {
		r1 = rf(name, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(string, *github.SearchOptions) error); ok {
		r2 = rf(name, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GitHubAPIMock_SearchProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchProjects'
type GitHubAPIMock_SearchProjects_Call struct {
	*mock.Call
}

// SearchProjects is a helper method to define mock.On call
//   - name string
//   - opts *github.SearchOptions
func (_e *GitHubAPIMock_Expecter) SearchProjects(name interface{}, opts interface{}) *GitHubAPIMock_SearchProjects_Call {
	return &GitHubAPIMock_SearchProjects_Call{Call: _e.mock.On("SearchProjects", name, opts)}
}

func (_c *GitHubAPIMock_SearchProjects_Call) Run(run func(name string, opts *github.SearchOptions)) *GitHubAPIMock_SearchProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*github.SearchOptions))
	})
	return _c
}

func (_c *GitHubAPIMock_SearchProjects_Call) Return(_a0 *github.RepositoriesSearchResult, _a1 *github.Response, _a2 error) *GitHubAPIMock_SearchProjects_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GitHubAPIMock_SearchProjects_Call) RunAndReturn(run func(string, *github.SearchOptions) (*github.RepositoriesSearchResult, *github.Response, error)) *GitHubAPIMock_SearchProjects_Call {
	_c.Call.Return(run)
	return _c
}

// NewGitHubAPIMock creates a new instance of GitHubAPIMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitHubAPIMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitHubAPIMock {
	mock := &GitHubAPIMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
